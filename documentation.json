{
    "pipes": [
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-944328e3cd10f22876454408406a54b2",
            "file": "src/app/pipes/safe-html.pipe.ts",
            "type": "pipe",
            "description": "<p>By default angular sanitizes html and strips out things like\nstyles which we want to keep because it doesnt know if it can be trusted\nhowever we know this html is from a trusted source</p>\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "html",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n/**\r\n * By default angular sanitizes html and strips out things like\r\n * styles which we want to keep because it doesnt know if it can be trusted\r\n * however we know this html is from a trusted source\r\n */\r\n@Pipe({\r\n  name: 'safeHtml'\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Background",
            "id": "interface-Background-107ac98da445040d8f4525a9ca35292e",
            "file": "src/app/models/ContentBlockDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\n\r\nexport interface ContentBlockDoc extends ContentDoc {\r\n    Background: Background;\r\n    DateRange: DateRange;\r\n    HorizontalAlignment: 'Left' | 'Center' | 'Right';\r\n    VerticalAlignment: 'Top' | 'Middle' | 'Bottom';\r\n    Button?: ContentButton;\r\n    TextArea: string;\r\n}\r\n\r\ninterface Background {\r\n    ImageUrl: string; // assetID\r\n    Color: string;\r\n}\r\n\r\ninterface DateRange {\r\n    StartDate?: Date;\r\n    EndDate?: Date;\r\n}\r\n\r\ninterface ContentButton {\r\n    Text: string;\r\n    Link: string;\r\n    Color: string;\r\n    Outlined: boolean;\r\n    Variant: boolean;\r\n}",
            "properties": [
                {
                    "name": "Color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "ImageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BootstrapCarouselOptions",
            "id": "interface-BootstrapCarouselOptions-d05f0407abd34843ea546ddc58d6fef9",
            "file": "src/app/models/CarouselContentDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\n// import { ContentBlock } from './ContentBlock.interface';\r\n\r\ntype BootstrapCarouselPauseOption =\r\n  | 'hover'\r\n  | 'mouseenter'\r\n  | 'mouseleave'\r\n  | false;\r\n\r\ntype BootstrapCarouselRideOption = 'carousel' | false;\r\n\r\ninterface BootstrapCarouselOptions {\r\n  interval: number;\r\n  keyboard: boolean;\r\n  pause: BootstrapCarouselPauseOption;\r\n  ride: BootstrapCarouselRideOption;\r\n  wrap: boolean;\r\n  touch: boolean;\r\n}\r\n\r\nexport interface CarouselContentDoc extends ContentDoc {\r\n  options: BootstrapCarouselOptions;\r\n  slides: string[]; //content doc urls\r\n}\r\n",
            "properties": [
                {
                    "name": "interval",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "keyboard",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "pause",
                    "type": "BootstrapCarouselPauseOption",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "ride",
                    "type": "BootstrapCarouselRideOption",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "touch",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "wrap",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CarouselContentDoc",
            "id": "interface-CarouselContentDoc-d05f0407abd34843ea546ddc58d6fef9",
            "file": "src/app/models/CarouselContentDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\n// import { ContentBlock } from './ContentBlock.interface';\r\n\r\ntype BootstrapCarouselPauseOption =\r\n  | 'hover'\r\n  | 'mouseenter'\r\n  | 'mouseleave'\r\n  | false;\r\n\r\ntype BootstrapCarouselRideOption = 'carousel' | false;\r\n\r\ninterface BootstrapCarouselOptions {\r\n  interval: number;\r\n  keyboard: boolean;\r\n  pause: BootstrapCarouselPauseOption;\r\n  ride: BootstrapCarouselRideOption;\r\n  wrap: boolean;\r\n  touch: boolean;\r\n}\r\n\r\nexport interface CarouselContentDoc extends ContentDoc {\r\n  options: BootstrapCarouselOptions;\r\n  slides: string[]; //content doc urls\r\n}\r\n",
            "properties": [
                {
                    "name": "options",
                    "type": "BootstrapCarouselOptions",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "slides",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ContentDoc"
        },
        {
            "name": "CarouselSlide",
            "id": "interface-CarouselSlide-568a7e92d1f76beae5e683d7300f536c",
            "file": "src/app/models/CarouselSlide.interface.ts",
            "type": "interface",
            "sourceCode": "export interface CarouselSlide {\r\n    ID: string;\r\n    ImageUrl: string;\r\n    ImageTitle: string;\r\n    Heading?: string;\r\n    Subheading?: string;\r\n    ActionText?: string;\r\n    ActionUrl?: string;\r\n}",
            "properties": [
                {
                    "name": "ActionText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ActionUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "Heading",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "ID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "ImageTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "ImageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "Subheading",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CmsAsset",
            "id": "interface-CmsAsset-ca7bd7da1cfa431930c76b236c5b166f",
            "file": "src/app/models/CmsAssets.interface.ts",
            "type": "interface",
            "sourceCode": "export interface CmsAsset {\r\n  url: string;\r\n  title: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CmsBackground",
            "id": "interface-CmsBackground-421514e558c85ca5ec861902298c407f",
            "file": "src/app/models/CmsCarousel.interface.ts",
            "type": "interface",
            "sourceCode": "import { CmsAsset } from './CmsAssets.interface';\r\n\r\nexport interface CmsBackground {\r\n  image?: CmsAsset;\r\n  color?: string | number;\r\n}\r\n\r\nexport interface CmsCarouselSlideTextConfig {\r\n  title?: string;\r\n  subtitle?: string;\r\n}\r\n\r\nexport interface CmsCarouselSlideConfig {\r\n  background?: CmsBackground;\r\n  text?: CmsCarouselSlideTextConfig;\r\n}\r\n\r\nexport interface CmsCarouselOptions {\r\n  arrows?: boolean;\r\n  indicators?: boolean;\r\n  wrap?: boolean;\r\n  interval?: number;\r\n  width?: number | string;\r\n  height?: number | string;\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "image",
                    "type": "CmsAsset",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CmsCarouselOptions",
            "id": "interface-CmsCarouselOptions-421514e558c85ca5ec861902298c407f",
            "file": "src/app/models/CmsCarousel.interface.ts",
            "type": "interface",
            "sourceCode": "import { CmsAsset } from './CmsAssets.interface';\r\n\r\nexport interface CmsBackground {\r\n  image?: CmsAsset;\r\n  color?: string | number;\r\n}\r\n\r\nexport interface CmsCarouselSlideTextConfig {\r\n  title?: string;\r\n  subtitle?: string;\r\n}\r\n\r\nexport interface CmsCarouselSlideConfig {\r\n  background?: CmsBackground;\r\n  text?: CmsCarouselSlideTextConfig;\r\n}\r\n\r\nexport interface CmsCarouselOptions {\r\n  arrows?: boolean;\r\n  indicators?: boolean;\r\n  wrap?: boolean;\r\n  interval?: number;\r\n  width?: number | string;\r\n  height?: number | string;\r\n}\r\n",
            "properties": [
                {
                    "name": "arrows",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "height",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "indicators",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "interval",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "width",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "wrap",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CmsCarouselSlideConfig",
            "id": "interface-CmsCarouselSlideConfig-421514e558c85ca5ec861902298c407f",
            "file": "src/app/models/CmsCarousel.interface.ts",
            "type": "interface",
            "sourceCode": "import { CmsAsset } from './CmsAssets.interface';\r\n\r\nexport interface CmsBackground {\r\n  image?: CmsAsset;\r\n  color?: string | number;\r\n}\r\n\r\nexport interface CmsCarouselSlideTextConfig {\r\n  title?: string;\r\n  subtitle?: string;\r\n}\r\n\r\nexport interface CmsCarouselSlideConfig {\r\n  background?: CmsBackground;\r\n  text?: CmsCarouselSlideTextConfig;\r\n}\r\n\r\nexport interface CmsCarouselOptions {\r\n  arrows?: boolean;\r\n  indicators?: boolean;\r\n  wrap?: boolean;\r\n  interval?: number;\r\n  width?: number | string;\r\n  height?: number | string;\r\n}\r\n",
            "properties": [
                {
                    "name": "background",
                    "type": "CmsBackground",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "text",
                    "type": "CmsCarouselSlideTextConfig",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CmsCarouselSlideTextConfig",
            "id": "interface-CmsCarouselSlideTextConfig-421514e558c85ca5ec861902298c407f",
            "file": "src/app/models/CmsCarousel.interface.ts",
            "type": "interface",
            "sourceCode": "import { CmsAsset } from './CmsAssets.interface';\r\n\r\nexport interface CmsBackground {\r\n  image?: CmsAsset;\r\n  color?: string | number;\r\n}\r\n\r\nexport interface CmsCarouselSlideTextConfig {\r\n  title?: string;\r\n  subtitle?: string;\r\n}\r\n\r\nexport interface CmsCarouselSlideConfig {\r\n  background?: CmsBackground;\r\n  text?: CmsCarouselSlideTextConfig;\r\n}\r\n\r\nexport interface CmsCarouselOptions {\r\n  arrows?: boolean;\r\n  indicators?: boolean;\r\n  wrap?: boolean;\r\n  interval?: number;\r\n  width?: number | string;\r\n  height?: number | string;\r\n}\r\n",
            "properties": [
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ColumnContentDoc",
            "id": "interface-ColumnContentDoc-93fb30a048e58a6dc1b62abf592833ef",
            "file": "src/app/models/ColumnContentDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\n\r\nexport interface ColumnContentDoc extends ContentDoc {\r\n    Width?: number | BootstrapMediaDefinition\r\n    Padding?: 0 | 1 | 2 | 3 | 4 | 5 | 'auto';\r\n    Content: ContentDoc[]\r\n}\r\n\r\nexport type BootstrapBreakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl'\r\nexport type BootstrapMediaDefinition = {\r\n    [key in BootstrapBreakpoint]?: number\r\n}",
            "properties": [
                {
                    "name": "Content",
                    "type": "ContentDoc[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Padding",
                    "type": "\"0\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"auto\"",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "Width",
                    "type": "number | BootstrapMediaDefinition",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ContentDoc"
        },
        {
            "name": "ContentBlockDoc",
            "id": "interface-ContentBlockDoc-107ac98da445040d8f4525a9ca35292e",
            "file": "src/app/models/ContentBlockDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\n\r\nexport interface ContentBlockDoc extends ContentDoc {\r\n    Background: Background;\r\n    DateRange: DateRange;\r\n    HorizontalAlignment: 'Left' | 'Center' | 'Right';\r\n    VerticalAlignment: 'Top' | 'Middle' | 'Bottom';\r\n    Button?: ContentButton;\r\n    TextArea: string;\r\n}\r\n\r\ninterface Background {\r\n    ImageUrl: string; // assetID\r\n    Color: string;\r\n}\r\n\r\ninterface DateRange {\r\n    StartDate?: Date;\r\n    EndDate?: Date;\r\n}\r\n\r\ninterface ContentButton {\r\n    Text: string;\r\n    Link: string;\r\n    Color: string;\r\n    Outlined: boolean;\r\n    Variant: boolean;\r\n}",
            "properties": [
                {
                    "name": "Background",
                    "type": "Background",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "Button",
                    "type": "ContentButton",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "DateRange",
                    "type": "DateRange",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "HorizontalAlignment",
                    "type": "\"Left\" | \"Center\" | \"Right\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "TextArea",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "VerticalAlignment",
                    "type": "\"Top\" | \"Middle\" | \"Bottom\"",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ContentDoc"
        },
        {
            "name": "ContentButton",
            "id": "interface-ContentButton-107ac98da445040d8f4525a9ca35292e",
            "file": "src/app/models/ContentBlockDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\n\r\nexport interface ContentBlockDoc extends ContentDoc {\r\n    Background: Background;\r\n    DateRange: DateRange;\r\n    HorizontalAlignment: 'Left' | 'Center' | 'Right';\r\n    VerticalAlignment: 'Top' | 'Middle' | 'Bottom';\r\n    Button?: ContentButton;\r\n    TextArea: string;\r\n}\r\n\r\ninterface Background {\r\n    ImageUrl: string; // assetID\r\n    Color: string;\r\n}\r\n\r\ninterface DateRange {\r\n    StartDate?: Date;\r\n    EndDate?: Date;\r\n}\r\n\r\ninterface ContentButton {\r\n    Text: string;\r\n    Link: string;\r\n    Color: string;\r\n    Outlined: boolean;\r\n    Variant: boolean;\r\n}",
            "properties": [
                {
                    "name": "Color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "Link",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "Outlined",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "Text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "Variant",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ContentDoc",
            "id": "interface-ContentDoc-cdb3cdb1221922b285143856f68aab37",
            "file": "src/app/models/ContentDoc.interface.ts",
            "type": "interface",
            "sourceCode": "export interface ContentDoc {\r\n    ComponentName: string;\r\n}",
            "properties": [
                {
                    "name": "ComponentName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DateRange",
            "id": "interface-DateRange-107ac98da445040d8f4525a9ca35292e",
            "file": "src/app/models/ContentBlockDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\n\r\nexport interface ContentBlockDoc extends ContentDoc {\r\n    Background: Background;\r\n    DateRange: DateRange;\r\n    HorizontalAlignment: 'Left' | 'Center' | 'Right';\r\n    VerticalAlignment: 'Top' | 'Middle' | 'Bottom';\r\n    Button?: ContentButton;\r\n    TextArea: string;\r\n}\r\n\r\ninterface Background {\r\n    ImageUrl: string; // assetID\r\n    Color: string;\r\n}\r\n\r\ninterface DateRange {\r\n    StartDate?: Date;\r\n    EndDate?: Date;\r\n}\r\n\r\ninterface ContentButton {\r\n    Text: string;\r\n    Link: string;\r\n    Color: string;\r\n    Outlined: boolean;\r\n    Variant: boolean;\r\n}",
            "properties": [
                {
                    "name": "EndDate",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "StartDate",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PageContentDoc",
            "id": "interface-PageContentDoc-3329eae16676c9cf2f859d18b098fab9",
            "file": "src/app/models/PageContentDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\n\r\nexport interface PageContentDoc extends ContentDoc {\r\n  Url: string;\r\n  SiteUrl: string;\r\n  Title: string;\r\n  Description: string;\r\n  MetaImageUrl: string;\r\n  DateLastUpdated: string;\r\n  Active: boolean;\r\n  Content: string;\r\n  HeaderEmbeds?: string;\r\n  FooterEmbeds?: string;\r\n  NavigationTitle?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "Active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "Content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "DateLastUpdated",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "Description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "FooterEmbeds",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "HeaderEmbeds",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "MetaImageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "NavigationTitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "SiteUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "Title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ContentDoc"
        },
        {
            "name": "RowContentDoc",
            "id": "interface-RowContentDoc-7a3134891888c616e2ae854ba7c5ffce",
            "file": "src/app/models/RowContentDoc.interface.ts",
            "type": "interface",
            "sourceCode": "import { ContentDoc } from './ContentDoc.interface';\r\nimport { ColumnContentDoc } from './ColumnContentDoc.interface';\r\n\r\nexport interface RowContentDoc extends ContentDoc {\r\n    Content: ColumnContentDoc[]\r\n}",
            "properties": [
                {
                    "name": "Content",
                    "type": "ColumnContentDoc[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ContentDoc"
        }
    ],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BgColorDirective",
            "id": "directive-BgColorDirective-51db273ecc1544960fe6da62838ea979",
            "file": "src/app/directives/bg-color.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Input, ElementRef, OnInit } from '@angular/core';\r\nimport Color from 'color';\r\n\r\n@Directive({\r\n  selector: '[cmsBgColor]',\r\n})\r\nexport class BgColorDirective implements OnInit {\r\n  @Input() cmsBgColor?: string;\r\n  el: ElementRef;\r\n  constructor(el: ElementRef) {\r\n    this.el = el;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.cmsBgColor) {\r\n      try {\r\n        const color = new Color(this.cmsBgColor);\r\n        this.el.nativeElement.style.backgroundColor = color.hex();\r\n      } catch (ex) {\r\n        throw ex;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[cmsBgColor]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "cmsBgColor",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-5a5cab021e5f33b96aa917442af139e8",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buyerSiteUrl",
                    "defaultValue": "'https://mgr-buyer-test.ordercloud-qa.com'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "editorOptions",
                    "defaultValue": "{\r\n    ordercloud: {\r\n      marketplaceUrl: 'https://marketplace-middleware-test.azurewebsites.net',\r\n      access_token:\r\n        'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c3IiOiJhbm9uLXRlbXBsYXRlLXVzZXIiLCJjaWQiOiJlOTU1ZDZlYy01OWM4LTQ0NDItOTQ4ZS0xNmNjYzVmZDI3YWUiLCJvcmRlcmlkIjoiWTR5SzNwdUl1MGE3Qk5CV2pjWEVMQSIsInUiOiIxMDIwMjMwIiwidXNydHlwZSI6ImJ1eWVyIiwicm9sZSI6WyJNZUFkZHJlc3NBZG1pbiIsIk1lQWRtaW4iLCJNZUNyZWRpdENhcmRBZG1pbiIsIk1lWHBBZG1pbiIsIlNob3BwZXIiLCJTdXBwbGllclJlYWRlciIsIlN1cHBsaWVyQWRkcmVzc1JlYWRlciIsIlBhc3N3b3JkUmVzZXQiLCJCdXllclJlYWRlciJdLCJpc3MiOiJodHRwczovL2F1dGgub3JkZXJjbG91ZC5pbyIsImF1ZCI6Imh0dHBzOi8vYXBpLm9yZGVyY2xvdWQuaW8iLCJleHAiOjE1OTQ4NDUxNTksIm5iZiI6MTU5NDI0MDM1OX0.lpQBQAYqlssXmxtcHLxck5N6CGxr31ZA71SUqyxxLJE'\r\n    },\r\n    content_css: [\r\n      // 'https://piasstorageprod.azureedge.net/buyerweb/styles.07d24b25eb6a60350a70.css',\r\n      'https://mgrstoragetest.azureedge.net/buyerweb/styles.e94215343d3493186ae1.css',\r\n      'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css',\r\n      'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css'\r\n    ]\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "'marketplace-cms-components'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  constructor() {}\r\n  title = 'marketplace-cms-components';\r\n  buyerSiteUrl = 'https://mgr-buyer-test.ordercloud-qa.com';\r\n  editorOptions = {\r\n    ordercloud: {\r\n      marketplaceUrl: 'https://marketplace-middleware-test.azurewebsites.net',\r\n      access_token:\r\n        'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c3IiOiJhbm9uLXRlbXBsYXRlLXVzZXIiLCJjaWQiOiJlOTU1ZDZlYy01OWM4LTQ0NDItOTQ4ZS0xNmNjYzVmZDI3YWUiLCJvcmRlcmlkIjoiWTR5SzNwdUl1MGE3Qk5CV2pjWEVMQSIsInUiOiIxMDIwMjMwIiwidXNydHlwZSI6ImJ1eWVyIiwicm9sZSI6WyJNZUFkZHJlc3NBZG1pbiIsIk1lQWRtaW4iLCJNZUNyZWRpdENhcmRBZG1pbiIsIk1lWHBBZG1pbiIsIlNob3BwZXIiLCJTdXBwbGllclJlYWRlciIsIlN1cHBsaWVyQWRkcmVzc1JlYWRlciIsIlBhc3N3b3JkUmVzZXQiLCJCdXllclJlYWRlciJdLCJpc3MiOiJodHRwczovL2F1dGgub3JkZXJjbG91ZC5pbyIsImF1ZCI6Imh0dHBzOi8vYXBpLm9yZGVyY2xvdWQuaW8iLCJleHAiOjE1OTQ4NDUxNTksIm5iZiI6MTU5NDI0MDM1OX0.lpQBQAYqlssXmxtcHLxck5N6CGxr31ZA71SUqyxxLJE'\r\n    },\r\n    content_css: [\r\n      // 'https://piasstorageprod.azureedge.net/buyerweb/styles.07d24b25eb6a60350a70.css',\r\n      'https://mgrstoragetest.azureedge.net/buyerweb/styles.e94215343d3493186ae1.css',\r\n      'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css',\r\n      'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css'\r\n    ]\r\n  };\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"jumbotron\">\r\n  <div class=\"container\">\r\n    <h1>Page Editor Demonstration</h1>\r\n  </div>\r\n</div>\r\n<div class=\"container\">\r\n  <cms-page-editor\r\n    [renderSiteUrl]=\"buyerSiteUrl\"\r\n    [editorOptions]=\"editorOptions\"\r\n  ></cms-page-editor>\r\n</div>\r\n"
        },
        {
            "name": "AssetPickerComponent",
            "id": "component-AssetPickerComponent-55e7b1ef55dfa71ceefd28c1cbb78950",
            "file": "src/app/components/asset-picker/asset-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-asset-picker",
            "styleUrls": [
                "./asset-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./asset-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alive",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "list",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "parameters",
                    "defaultValue": "{\r\n    page: 1,\r\n    pageSize: 10,\r\n    filters: {}\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "previousSearchTerm",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "searchForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onFormChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { MarketplaceSDK } from 'marketplace-javascript-sdk';\r\nimport * as MarketplaceSdkInstance from 'marketplace-javascript-sdk';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { debounceTime, takeWhile, filter } from 'rxjs/operators';\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\n\r\n@Component({\r\n  selector: 'cms-asset-picker',\r\n  templateUrl: './asset-picker.component.html',\r\n  styleUrls: ['./asset-picker.component.scss']\r\n})\r\nexport class AssetPickerComponent implements OnInit, OnDestroy {\r\n  loading = true;\r\n  alive = true;\r\n  previousSearchTerm = ''\r\n  searchForm: FormGroup\r\n  list: any;\r\n  parameters = {\r\n    page: 1,\r\n    pageSize: 10,\r\n    filters: {}\r\n  }\r\n\r\n  constructor(\r\n    public modal: NgbActiveModal, \r\n    private formBuilder: FormBuilder, \r\n    private spinner: NgxSpinnerService\r\n    ) { }\r\n\r\n  \r\n\r\n  ngOnInit(): void {\r\n    this.searchForm = this.formBuilder.group({search: ''})\r\n    this.onFormChanges();\r\n    this.changePage(1);\r\n  }\r\n\r\n  onFormChanges() {\r\n    this.searchForm.controls['search'].valueChanges\r\n      .pipe(\r\n        filter((searchTerm) =>  searchTerm !== this.previousSearchTerm),\r\n        debounceTime(500),\r\n        takeWhile(() => this.alive)\r\n      )\r\n      .subscribe((searchTerm) => {\r\n        this.previousSearchTerm = searchTerm;\r\n        this.search();\r\n      });\r\n  }\r\n\r\n  search() {\r\n    // undefined if empty string so sdk ignores parameter completely\r\n    const searchTerm = this.searchForm.controls.search.value || undefined;\r\n    this.parameters.filters['Title'] = searchTerm;\r\n    this.changePage(1);\r\n  }\r\n\r\n  changePage(page: number) {\r\n    this.loading = true;\r\n    this.spinner.show();\r\n    this.parameters.page = page;\r\n    return MarketplaceSDK.Assets.List(this.parameters)\r\n      .then(assetList => {\r\n        this.list = assetList;\r\n      })\r\n      .catch(e => {\r\n        if(e.response.status === 401) {\r\n          alert('Access forbidden');\r\n        } else {\r\n          alert(e.message);\r\n        }\r\n      })\r\n      .finally(() => {\r\n        this.loading = false;\r\n        this.spinner.hide()\r\n      })\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    this.alive = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$asset-item-margin: 10px;\r\n\r\n.asset-list {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    margin: 0 -($asset-item-margin);\r\n}\r\n\r\n.asset-item {\r\n    cursor: pointer;\r\n    margin: $asset-item-margin;\r\n}\r\n\r\n.asset-image {\r\n    max-width: 200px;\r\n}\r\n\r\n.no-results {\r\n    background-color: #ececec;\r\n    width: 100%;\r\n    border-radius: 15px;\r\n    margin-top: 25%;\r\n    &_msg {\r\n        padding: 5px 0 5px 0;\r\n    }\r\n}\r\n\r\n.modal-body {\r\n    min-height: 590px;\r\n}\r\n\r\n.pagination-container {\r\n    margin-top: 30px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}",
                    "styleUrl": "./asset-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Browse Assets</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss()\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <form [formGroup]=\"searchForm\">\r\n        <div class=\"form-group\">\r\n            <label for=\"asset-search\" ngbAutofocus class=\"sr-only\">Search for an asset by title</label>\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"search\" id=\"asset-search\"\r\n                placeholder=\"Search for an asset by title\">\r\n        </div>\r\n    </form>\r\n    <div *ngIf=\"!list?.Items?.length && !loading\">\r\n        <div class=\"no-results-well\">\r\n            <p class=\"no-results-well_msg text-center\">\r\n                No Assets were found\r\n            </p>\r\n        </div>\r\n    </div>\r\n    <div class=\"asset-list\" *ngIf=\"list?.Items?.length\">\r\n        <div class=\"asset-item\" *ngFor=\"let asset of list.Items\" (click)=\"modal.close(asset)\">\r\n            <img class=\"asset-item_img\" src=\"{{asset.Url}}\" alt=\"{{asset.title}}\">\r\n        </div>\r\n    </div>\r\n    <div class=\"pagination-container\">\r\n        <ngb-pagination [maxSize]=\"5\" [boundaryLinks]=\"true\" *ngIf=\"list\" [collectionSize]=\"list.Meta.TotalCount\"\r\n            [(pageSize)]=\"list.Meta.PageSize\" [(page)]=\"list.Meta.Page\" aria-label=\"Pagination Buttons\"\r\n            (pageChange)=\"changePage($event)\">\r\n        </ngb-pagination>\r\n    </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"modal.dismiss()\">Close</button>\r\n</div>\r\n<ngx-spinner class=\"asset-picker-spinner\" type = \"ball-beat\" bdColor=\"rgba(255, 255, 255, 0.38)\" color=\"#969696\" [fullScreen]=\"false\"></ngx-spinner>"
        },
        {
            "name": "CarouselEditorComponent",
            "id": "component-CarouselEditorComponent-e9018d6371f4c56701c3bbbe4f35fc54",
            "file": "src/app/components/carousel-editor/carousel-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-carousel-editor",
            "styleUrls": [
                "./carousel-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "CAROUSEL_SLIDES",
                    "defaultValue": "'CAROUSEL_SLIDES'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "carouselSettings",
                    "defaultValue": "{\r\n    speed: 300,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 3,\r\n    rows: 1,\r\n    autoplay: true,\r\n    infinite: true,\r\n    dots: true,\r\n    arrows: true,\r\n    centerMode: false,\r\n    fade: true\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "carouselSettingsForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedSlide",
                    "type": "CarouselSlide",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "slideEditForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "slides",
                    "defaultValue": "[]",
                    "type": "CarouselSlide[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subs",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "zone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addCarousel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "buildCarouselHtml",
                    "args": [
                        {
                            "name": "carouselId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "carouselId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSlide",
                    "args": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSlideIndex",
                    "args": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 124,
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "onCarouselSettingsFormChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "onSlideEditFormChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "openAssetPicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "selectSlide",
                    "args": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "CarouselSlide",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, NgZone } from '@angular/core';\r\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AssetPickerComponent } from '../asset-picker/asset-picker.component';\r\nimport { CarouselSlide } from 'src/app/models/CarouselSlide.interface';\r\nimport { v4 as guid } from 'uuid';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'cms-carousel-editor',\r\n  templateUrl: './carousel-editor.component.html',\r\n  styleUrls: ['./carousel-editor.component.scss']\r\n})\r\nexport class CarouselEditorComponent implements OnInit {\r\n  slideEditForm: FormGroup;\r\n  carouselSettingsForm: FormGroup;\r\n  selectedSlide: CarouselSlide;\r\n  subs = new Subscription();\r\n  CAROUSEL_SLIDES = 'CAROUSEL_SLIDES'\r\n\r\n  slides: CarouselSlide[] = [];\r\n  carouselSettings = {\r\n    speed: 300,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 3,\r\n    rows: 1,\r\n    autoplay: true,\r\n    infinite: true,\r\n    dots: true,\r\n    arrows: true,\r\n    centerMode: false,\r\n    fade: true\r\n  };\r\n  constructor(\r\n    public modal: NgbActiveModal,\r\n    private modalService: NgbModal,\r\n    private formBuilder: FormBuilder,\r\n    public zone: NgZone\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.carouselSettingsForm = this.formBuilder.group(this.carouselSettings)\r\n    this.slideEditForm = this.formBuilder.group({ Heading: '', Subheading: '', ActionText: '', ActionUrl: '' })\r\n    this.onSlideEditFormChanges();\r\n    this.onCarouselSettingsFormChanges();\r\n  }\r\n\r\n  onSlideEditFormChanges() {\r\n    this.slideEditForm.valueChanges.subscribe(formValues => {\r\n      const index = this.getSlideIndex(this.selectedSlide)\r\n      this.slides[index] = { ...this.selectedSlide, ...formValues }\r\n    })\r\n  }\r\n\r\n  onCarouselSettingsFormChanges() {\r\n    this.carouselSettingsForm.valueChanges.subscribe(formValues => {\r\n      this.carouselSettings = formValues;\r\n    })\r\n  }\r\n\r\n  addCarousel() {\r\n    const carouselId = `oc-carousel-${guid()}`;\r\n    const html = this.buildCarouselHtml.bind(this)(carouselId)\r\n    this.modal.close(html);\r\n  }\r\n\r\n  buildCarouselHtml(carouselId) {\r\n    return `\r\n    <div class=\"carousel-wrapper\" contenteditable=\"false\">\r\n      <div id=\"${carouselId}\">\r\n        ${this.slides.map(slide => {\r\n          return `\r\n            <div class=\"c-slide-container\">\r\n              <img src=\"${slide.ImageUrl}\" title=\"${slide.ImageTitle}\"/>\r\n              ${slide.Heading ? `<h1>${slide.Heading}</h1>` : ``}\r\n              ${slide.Subheading ? `<h2>${slide.Heading}</h2>` : ``}\r\n              ${slide.ActionUrl && slide.ActionText ? `<a href=\"${slide.ActionUrl}\">${slide.ActionText}</a>` : ``}\r\n            </div>\r\n            `\r\n        }).join('')}\r\n      </div>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css\"/>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css\"/>\r\n    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js\"></script>\r\n    <script>\r\n      $(document).ready(function() {\r\n        $('#${carouselId}').slick({slidesToShow: 3});\r\n      });\r\n    </script>\r\n    </div>\r\n    `\r\n  }\r\n\r\n  deleteSlide(slide: CarouselSlide) {\r\n    this.slides = this.slides.filter(s => s.ID !== slide.ID)\r\n    if (this.isSelected(slide)) {\r\n      delete this.selectedSlide;\r\n      if (this.slides.length) {\r\n        this.selectedSlide = this.slides[this.slides.length - 1];\r\n      }\r\n    }\r\n  }\r\n\r\n  openAssetPicker() {\r\n    const modalRef = this.modalService.open(AssetPickerComponent, {\r\n      size: 'xl',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window'\r\n    });\r\n    modalRef.result.then(asset => {\r\n      const slide = {\r\n        ID: guid(),\r\n        ImageTitle: asset.Title,\r\n        ImageUrl: asset.Url\r\n      };\r\n      this.slides.unshift(slide);\r\n      this.selectSlide(slide);\r\n    })\r\n  }\r\n\r\n  getSlideIndex(slide: CarouselSlide) {\r\n    return this.slides.map(a => a.ID).indexOf(slide.ID);\r\n  }\r\n\r\n  isSelected(slide: CarouselSlide) {\r\n    if (!slide) {\r\n      return false;\r\n    }\r\n    if (!this.selectedSlide) {\r\n      return false;\r\n    }\r\n    return this.selectedSlide.ID === slide.ID;\r\n  }\r\n\r\n  selectSlide(slide: CarouselSlide) {\r\n    this.selectedSlide = slide;\r\n    this.slideEditForm.controls['Heading'].setValue(slide.Heading)\r\n    this.slideEditForm.controls['Subheading'].setValue(slide.Subheading)\r\n    this.slideEditForm.controls['ActionText'].setValue(slide.ActionText)\r\n    this.slideEditForm.controls['ActionUrl'].setValue(slide.ActionUrl)\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// carousel\r\n$slide-height: 75px;\r\n$slide-width: $slide-height;\r\n$slide-margin: 20px;\r\n$slide-row-height: $slide-height + $slide-margin + $slide-margin;\r\n$slide-bg: #C4C4C4;\r\n$slide-selected-color: #ffe600;\r\n\r\n:host {\r\n    background-color: #F8F8F8;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: .6rem;\r\n  display: flex;\r\n\r\n  label {\r\n      flex-grow: 1;\r\n  }\r\n\r\n  input {\r\n      width: initial;\r\n  }\r\n}\r\n\r\n.slides {\r\n    display: grid;\r\n    margin: 0px (-$slide-margin);\r\n    grid-template-columns: repeat(auto-fit, minmax($slide-row-height, $slide-row-height));\r\n    max-height: 2 * $slide-row-height;\r\n    overflow-y: auto;\r\n    cursor: move;\r\n}\r\n\r\n.slide-selected {\r\n    -webkit-box-shadow: 0px 0px 17px -3px $slide-selected-color;\r\n    -moz-box-shadow: 0px 0px 17px -3px $slide-selected-color;\r\n    box-shadow: 0px 0px 17px -3px $slide-selected-color;\r\n}\r\n\r\n.slide {\r\n  margin: $slide-margin;\r\n  height: $slide-height;\r\n  width: $slide-width;\r\n  border-radius: 15px;\r\n  background-color: $slide-bg;\r\n  position: relative;\r\n  img {\r\n    object-fit: cover;\r\n    height: 100%;\r\n    width: 100%;\r\n    border-radius: 15px;\r\n  }\r\n\r\n  .icon-delete_forever {\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: -7px;\r\n    right: -7px;\r\n    color: white;\r\n    background-color: #FF4158;\r\n    width: 25px;\r\n    height: 25px;\r\n    border-radius: 50%;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n.add-image-btn {\r\n  margin: 15px 0;\r\n}",
                    "styleUrl": "./carousel-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n    <h4 class=\"modal-title\">Carousel Builder</h4>\r\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n    <div class=\"row\">\r\n        <div class=\"col-lg-6 col-xl-7\">\r\n            <h4 class=\"text-muted\">Drag to rearrange the order of your carousel slides</h4>\r\n            <button class=\"btn btn-primary add-image-btn\" (click)=\"openAssetPicker()\">Add Image</button>\r\n            <div class=\"slides\">\r\n                <div class=\"slide\" *ngFor=\"let slide of slides\" (click)=\"selectSlide(slide)\" [ngClass]=\"{'slide-selected': isSelected(slide)}\">\r\n                    <img src=\"{{slide.ImageUrl}}\" alt=\"{{slide.ImageTitle}}\">\r\n                    <span (click)=\"deleteSlide(slide)\" class=\"icon-delete_forever\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-lg-6 col-xl-5\" *ngIf=\"selectedSlide\">\r\n            <h4 class=\"text-muted\">Edit Slide {{getSlideIndex(selectedSlide) + 1}}</h4>\r\n            <form [formGroup]=\"slideEditForm\" autocomplete=\"off\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"slide-h1\">Heading</label>\r\n                    <input formControlName=\"Heading\" id=\"slide-h1\" class=\"form-control\" type=\"text\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"slide-h2\">Subheading</label>\r\n                    <input formControlName=\"Subheading\" id=\"slide-h2\" class=\"form-control\" type=\"text\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"slide-actiontext\">Action Text</label>\r\n                    <input formControlName=\"ActionText\" id=\"slide-actiontext\" class=\"form-control\" type=\"text\" />\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"slide-actionurl\">Action URL</label>\r\n                    <input formControlName=\"ActionUrl\" id=\"slide-actionurl\" class=\"form-control\" type=\"text\" />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n    <hr>\r\n    <form [formGroup]=\"carouselSettingsForm\" autocomplete=\"off\">\r\n        <h4 class=\"text-muted\">\r\n            Carousel Settings\r\n        </h4>\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-6 col-xl-4\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"carousel-speed\">Carousel Speed <span\r\n                            class=\"text-muted\">(milliseconds)</span></label>\r\n                    <input formControlName=\"speed\" id=\"carousel-speed\" class=\"form-control\" type=\"number\" ngbAutofocus/>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"carousel-slides-to-show\">Slides to Show</label>\r\n                    <input formControlName=\"slidesToShow\" id=\"carousel-slides-to-show\" class=\"form-control\" type=\"number\"/>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"carousel-slides-to-scroll\">Slides to Scroll</label>\r\n                    <input formControlName=\"slidesToScroll\" id=\"carousel-slides-to-scroll\" class=\"form-control\" type=\"number\"/>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"carousel-rows\">Rows</label>\r\n                    <input formControlName=\"rows\" id=\"carousel-rows\" class=\"form-control\" type=\"number\"/>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-lg-6 col-xl-4 d-flex flex-column justify-content-between\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"autoplay\" type=\"checkbox\" class=\"custom-control-input\" id=\"carousel-autoplay\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-autoplay\">Autoplay</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"infinite\" type=\"checkbox\" class=\"custom-control-input\" id=\"carousel-infinite-loop\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-infinite-loop\">Infinite Loop</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"dots\" type=\"checkbox\" class=\"custom-control-input\" id=\"carousel-show-dots\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-show-dots\">Show Dots</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"arrows\" type=\"checkbox\" class=\"custom-control-input\" id=\"carousel-show-arrows\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-show-arrows\">Show Arrows</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"centerMode\" type=\"checkbox\" class=\"custom-control-input\" id=\"carousel-center-mode\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-center-mode\">Center Mode</label>\r\n                </div>\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input formControlName=\"fade\" type=\"checkbox\" class=\"custom-control-input\" id=\"carousel-fade-transition\">\r\n                    <label class=\"custom-control-label\" for=\"carousel-fade-transition\">Fade Transition</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!slides.length\"  (click)=\"addCarousel()\">Add Carousel</button>\r\n</div>"
        },
        {
            "name": "ConfirmModalComponent",
            "id": "component-ConfirmModalComponent-501acb682683a95563c41cc75a226265",
            "file": "src/app/components/confirm-modal/confirm-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-confirm-modal",
            "styleUrls": [
                "./confirm-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelText",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "confirmText",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "message",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancel",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "proceed",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'cms-confirm-modal',\r\n  templateUrl: './confirm-modal.component.html',\r\n  styleUrls: ['./confirm-modal.component.scss'],\r\n})\r\nexport class ConfirmModalComponent {\r\n  @Input()\r\n  confirmText?: string;\r\n\r\n  @Input()\r\n  cancelText?: string;\r\n\r\n  @Input()\r\n  message?: string;\r\n\r\n  @Output()\r\n  proceed = new EventEmitter();\r\n\r\n  @Output()\r\n  cancel = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirm-modal.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"modal-content\">\r\n  <div class=\"modal-body\">\r\n    <h5 class=\"text-center\">{{message || 'Are you sure?'}}</h5>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button (click)=\"cancel.emit()\"\r\n            type=\"button\"\r\n            class=\"btn btn-secondary\">{{cancelText || 'Cancel'}}</button>\r\n    <button (click)=\"proceed.emit()\"\r\n            type=\"button\"\r\n            class=\"btn btn-primary\">{{confirmText || 'Proceed'}}</button>\r\n  </div>\r\n</div>"
        },
        {
            "name": "HtmlEditorComponent",
            "id": "component-HtmlEditorComponent-b20f392e5c305d7c62051d96004d9b7f",
            "file": "src/app/components/html-editor/html-editor.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-html-editor",
            "styleUrls": [
                "./html-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./html-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editorOptions",
                    "line": 25,
                    "type": "any"
                },
                {
                    "name": "initialValue",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultEditorOptions",
                    "defaultValue": "{\r\n    base_url: '/tinymce',\r\n    suffix: '.min',\r\n    content_css:\r\n      'https://mgrstoragetest.azureedge.net/buyerweb/styles.e94215343d3493186ae1.css',\r\n    content_style: `\r\n    body {\r\n      padding:15px !important;\r\n    }\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container img { \r\n      display: none;\r\n    }\r\n\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container::before {\r\n      content: '';\r\n      width: 100%;\r\n      height: 200px;\r\n      position: absolute;\r\n      background-color: lightgray;\r\n    }\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container::after {\r\n      font-weight: bold;\r\n      content: 'Carousel preview not available in edit mode. Click View > Preview';\r\n      z-index: 0;\r\n    }\r\n    `,\r\n    height: 500,\r\n\r\n    plugins: [\r\n      'ordercloud print preview paste importcss searchreplace autolink autosave save directionality',\r\n      'code visualblocks visualchars fullscreen image link media template codesample table charmap',\r\n      'hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools',\r\n      'textpattern noneditable help charmap emoticons'\r\n    ],\r\n    menubar: 'file edit view insert format tools table help',\r\n    toolbar: [\r\n      'oc-carousel oc-product oc-section',\r\n      'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat'\r\n    ],\r\n    quickbars_selection_toolbar:\r\n      'bold italic | quicklink h2 h3 blockquote quickimage quicktable',\r\n    imagetools_toolbar:\r\n      'rotateleft rotateright | flipv fliph | editimage imageoptions',\r\n    contextmenu:\r\n      'link image imagetools table oc-product oc-row oc-col oc-section',\r\n    toolbar_sticky: true,\r\n    autosave_ask_before_unload: true,\r\n    autosave_interval: '30s',\r\n    autosave_prefix: '{path}{query}-{id}-',\r\n    autosave_restore_when_empty: false,\r\n    autosave_retention: '2m',\r\n    importcss_append: true,\r\n    toolbar_mode: 'sliding',\r\n    extended_valid_elements: 'script[src|async|defer|type|charset]',\r\n\r\n    /**\r\n     * Adds an advanced tab to set things like style/border/space\r\n     */\r\n    image_advtab: true,\r\n\r\n    /**\r\n     * Adds an upload tab (uploads to ordercloud cms)\r\n     */\r\n    image_uploadtab: true,\r\n    images_upload_handler: function(blobInfo, successCallback, errorCallback) {\r\n      // importing tinymce breaks things so we have to use instance from window\r\n      window['tinymce'].execCommand('ocAssetUploader', true, {\r\n        blobInfo,\r\n        successCallback,\r\n        errorCallback\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Adds ability to transform images\r\n     */\r\n\r\n    imagetools_cors_hosts: ['marktplacetest.blob.core.windows.net']\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "resolvedEditorOptions",
                    "defaultValue": "{}",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "tinymceId",
                    "defaultValue": "`tiny-angular_${guid()}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "zone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "openAssetPicker",
                    "args": [
                        {
                            "name": "callback",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        },
                        {
                            "name": "meta",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "callback",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "meta",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCarouselEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180
                },
                {
                    "name": "openSectionDateSettings",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSectionPicker",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 190,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  NgZone,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { AssetPickerComponent } from '../asset-picker/asset-picker.component';\r\nimport { CarouselEditorComponent } from '../carousel-editor/carousel-editor.component';\r\nimport { v4 as guid } from 'uuid';\r\nimport { SectionPickerComponent } from '../section-picker/section-picker.component';\r\nimport { SectionDateSettingsComponent } from '../section-date-settings/section-date-settings.component';\r\nimport { Asset } from 'marketplace-javascript-sdk';\r\nimport * as MarketplaceSdkInstance from 'marketplace-javascript-sdk';\r\n\r\n@Component({\r\n  selector: 'cms-html-editor',\r\n  templateUrl: './html-editor.component.html',\r\n  styleUrls: ['./html-editor.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class HtmlEditorComponent implements OnInit {\r\n  @Input() initialValue: string;\r\n  @Input() editorOptions: any;\r\n  resolvedEditorOptions: any = {};\r\n\r\n  tinymceId = `tiny-angular_${guid()}`;\r\n\r\n  defaultEditorOptions = {\r\n    base_url: '/tinymce',\r\n    suffix: '.min',\r\n    content_css:\r\n      'https://mgrstoragetest.azureedge.net/buyerweb/styles.e94215343d3493186ae1.css',\r\n    content_style: `\r\n    body {\r\n      padding:15px !important;\r\n    }\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container img { \r\n      display: none;\r\n    }\r\n\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container {\r\n      position: relative;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container::before {\r\n      content: '';\r\n      width: 100%;\r\n      height: 200px;\r\n      position: absolute;\r\n      background-color: lightgray;\r\n    }\r\n    #tinymce[contenteditable=\"true\"] .c-slide-container::after {\r\n      font-weight: bold;\r\n      content: 'Carousel preview not available in edit mode. Click View > Preview';\r\n      z-index: 0;\r\n    }\r\n    `,\r\n    height: 500,\r\n\r\n    plugins: [\r\n      'ordercloud print preview paste importcss searchreplace autolink autosave save directionality',\r\n      'code visualblocks visualchars fullscreen image link media template codesample table charmap',\r\n      'hr pagebreak nonbreaking anchor toc insertdatetime advlist lists wordcount imagetools',\r\n      'textpattern noneditable help charmap emoticons'\r\n    ],\r\n    menubar: 'file edit view insert format tools table help',\r\n    toolbar: [\r\n      'oc-carousel oc-product oc-section',\r\n      'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat'\r\n    ],\r\n    quickbars_selection_toolbar:\r\n      'bold italic | quicklink h2 h3 blockquote quickimage quicktable',\r\n    imagetools_toolbar:\r\n      'rotateleft rotateright | flipv fliph | editimage imageoptions',\r\n    contextmenu:\r\n      'link image imagetools table oc-product oc-row oc-col oc-section',\r\n    toolbar_sticky: true,\r\n    autosave_ask_before_unload: true,\r\n    autosave_interval: '30s',\r\n    autosave_prefix: '{path}{query}-{id}-',\r\n    autosave_restore_when_empty: false,\r\n    autosave_retention: '2m',\r\n    importcss_append: true,\r\n    toolbar_mode: 'sliding',\r\n    extended_valid_elements: 'script[src|async|defer|type|charset]',\r\n\r\n    /**\r\n     * Adds an advanced tab to set things like style/border/space\r\n     */\r\n    image_advtab: true,\r\n\r\n    /**\r\n     * Adds an upload tab (uploads to ordercloud cms)\r\n     */\r\n    image_uploadtab: true,\r\n    images_upload_handler: function(blobInfo, successCallback, errorCallback) {\r\n      // importing tinymce breaks things so we have to use instance from window\r\n      window['tinymce'].execCommand('ocAssetUploader', true, {\r\n        blobInfo,\r\n        successCallback,\r\n        errorCallback\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Adds ability to transform images\r\n     */\r\n\r\n    imagetools_cors_hosts: ['marktplacetest.blob.core.windows.net']\r\n  };\r\n\r\n  constructor(private modalService: NgbModal, public zone: NgZone) {}\r\n\r\n  ngOnInit(): void {\r\n    Object.assign(\r\n      this.resolvedEditorOptions,\r\n      this.defaultEditorOptions,\r\n      this.editorOptions\r\n    );\r\n\r\n    // I think we need to set this here *and* in the plugin because it sets\r\n    // it on different instances of the sdk\r\n    MarketplaceSdkInstance.Configuration.Set({\r\n      baseApiUrl: this.resolvedEditorOptions.ordercloud.marketplaceUrl\r\n    });\r\n\r\n    this.resolvedEditorOptions.file_picker_callback = (\r\n      callback,\r\n      value,\r\n      meta\r\n    ) => {\r\n      this.zone.run(() => {\r\n        this.openAssetPicker.bind(this)(callback, value, meta);\r\n      });\r\n    };\r\n    this.resolvedEditorOptions.ordercloud.open_carousel_editor = editor => {\r\n      return this.zone.run(() => {\r\n        // we need to manually trigger change detection\r\n        // because this is running outside of the scope of angular\r\n        return this.openCarouselEditor.bind(this)(editor);\r\n      });\r\n    };\r\n    this.resolvedEditorOptions.ordercloud.open_section_picker = data => {\r\n      return this.zone.run(() => {\r\n        return this.openSectionPicker.bind(this)(data);\r\n      });\r\n    };\r\n    this.resolvedEditorOptions.ordercloud.open_section_date_settings = data => {\r\n      return this.zone.run(() => {\r\n        return this.openSectionDateSettings.bind(this)(data);\r\n      });\r\n    };\r\n  }\r\n\r\n  openAssetPicker(callback, value, meta) {\r\n    const modalRef = this.modalService.open(AssetPickerComponent, {\r\n      size: 'xl',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window'\r\n    });\r\n    modalRef.result.then((asset: Asset) => {\r\n      if (meta.filetype === 'image') {\r\n        callback(asset.Url, {alt: asset.Title});\r\n      } else if (meta.filetype === 'file') {\r\n        // TODO: do\r\n        console.error('Filetype is not yet implemented');\r\n      } else if (meta.filetype === 'media') {\r\n        // TODO: do\r\n        console.error('Filetype is not yet implemented');\r\n      }\r\n    });\r\n  }\r\n\r\n  openCarouselEditor() {\r\n    const modalRef = this.modalService.open(CarouselEditorComponent, {\r\n      size: 'xl',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window'\r\n    });\r\n    return modalRef.result\r\n  }\r\n\r\n  openSectionPicker(data) {\r\n    const modalRef = this.modalService.open(SectionPickerComponent, {\r\n      size: 'xl',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop', //TODO: might wanna abstract these classes / centered as default settings for any modal that's opened from the editor\r\n      windowClass: 'oc-tinymce-modal_window'\r\n    });\r\n    modalRef.componentInstance.data = data;\r\n    return modalRef.result;\r\n  }\r\n\r\n  openSectionDateSettings(data) {\r\n    const modalRef = this.modalService.open(SectionDateSettingsComponent, {\r\n      size: 'md',\r\n      centered: true,\r\n      backdropClass: 'oc-tinymce-modal_backdrop',\r\n      windowClass: 'oc-tinymce-modal_window'\r\n    });\r\n    modalRef.componentInstance.data = data;\r\n    return modalRef.result;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".oc-tinymce-modal_backdrop {\r\n  z-index: 1350 !important;\r\n}\r\n\r\n.oc-tinymce-modal_window {\r\n  z-index: 1351 !important;\r\n}\r\n",
                    "styleUrl": "./html-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 115,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<editor ng-if=\"resolvedEditorOptions\"\r\n  [initialValue]=\"initialValue\"\r\n  [init]=\"resolvedEditorOptions\"\r\n  [id]=\"tinymceId\"\r\n></editor>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-58b798c60d7f54a9fca8e2527dbf48bd",
            "file": "src/app/components/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page",
            "styleUrls": [
                "./page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "line": 16,
                    "type": "PageContentDoc"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "createScriptTag",
                    "args": [
                        {
                            "name": "content",
                            "type": "string"
                        },
                        {
                            "name": "appendTo",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "appendTo",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadScripts",
                    "args": [
                        {
                            "name": "headerEmbeds",
                            "type": ""
                        },
                        {
                            "name": "footerEmbeds",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "headerEmbeds",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "footerEmbeds",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "setMetaData",
                    "args": [
                        {
                            "name": "content",
                            "type": "PageContentDoc"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "PageContentDoc",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowContent",
                    "args": [
                        {
                            "name": "content",
                            "type": "PageContentDoc"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "content",
                            "type": "PageContentDoc",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>This component is responsible for dynamically rendering all of the components defined in <code>Content</code>\nas well as setting metadata important for SEO</p>\n",
            "rawdescription": "This component is responsible for dynamically rendering all of the components defined in `Content`\r\nas well as setting metadata important for SEO",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Renderer2, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\nimport { PageContentDoc } from '../../models/PageContentDoc.interface';\r\n\r\n/**\r\n * This component is responsible for dynamically rendering all of the components defined in `Content`\r\n * as well as setting metadata important for SEO\r\n */\r\n@Component({\r\n  selector: 'cms-page',\r\n  templateUrl: './page.component.html',\r\n  styleUrls: ['./page.component.scss']\r\n})\r\nexport class PageComponent implements OnInit {\r\n  @Input() content: PageContentDoc;\r\n\r\n  constructor(\r\n    private metaService: Meta,\r\n    private titleService: Title,\r\n    private renderer: Renderer2,\r\n    @Inject(DOCUMENT) private document: HTMLDocument\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    if (!this.shouldShowContent(this.content)) {\r\n      // this is an extra check, but should be handled at a higher level ideally\r\n      return console.warn('Page can not be displayed. Please ensure:\\n1. Page is active\\n2. Page has content doc urls\\n3. Page Url matches path of current url')\r\n    }\r\n    this.setMetaData(this.content);\r\n    this.loadScripts(this.content.HeaderEmbeds, this.content.FooterEmbeds);\r\n  }\r\n\r\n  private shouldShowContent(content: PageContentDoc): boolean {\r\n    return Boolean(\r\n      content &&\r\n      content.Active &&\r\n      content.Content\r\n    )\r\n  }\r\n\r\n  private setMetaData(content: PageContentDoc) {\r\n    // addTag results in dupes, so we use updateTag instead\r\n\r\n    // normal metadata\r\n    this.titleService.setTitle(content.Title);\r\n    this.metaService.updateTag({ property: 'application-name', content: content.SiteUrl })\r\n    this.metaService.updateTag({ property: 'description', content: content.Description })\r\n\r\n    // open graph meta data\r\n    this.metaService.updateTag({property: 'og:type', content: 'website'})\r\n    this.metaService.updateTag({property: 'og:title', content: content.Title})\r\n    this.metaService.updateTag({property: 'og:description', content: content.Description})\r\n    this.metaService.updateTag({property: 'og:image', content: content.MetaImageUrl})\r\n\r\n    // twitter metadata\r\n    this.metaService.updateTag({ property: 'twitter:card', content: 'summary' })\r\n    this.metaService.updateTag({ property: 'twitter:site', content: content.SiteUrl })\r\n    this.metaService.updateTag({ property: 'twitter:title', content: content.Title })\r\n    this.metaService.updateTag({ property: 'twitter:description', content: content.Description })\r\n    this.metaService.updateTag({property: 'twitter:image', content: content.MetaImageUrl})\r\n  }\r\n\r\n  private loadScripts(headerEmbeds, footerEmbeds) {\r\n    this.createScriptTag(headerEmbeds, 'head');\r\n    this.createScriptTag(footerEmbeds, 'body');\r\n  }\r\n\r\n  private createScriptTag(content: string, appendTo: string): void {\r\n    // create script\r\n    const script = this.renderer.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.textContent = content;\r\n\r\n    // append to target element\r\n    const target = this.document.getElementsByTagName(appendTo)[0];\r\n    this.renderer.appendChild(target, script);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "metaService",
                        "type": "Meta"
                    },
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "document",
                        "type": "HTMLDocument"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "metaService",
                        "type": "Meta",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "document",
                        "type": "HTMLDocument",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<cms-content-container \r\n    *ngFor=\"let contentBlock of content.Content\" [content]=\"contentBlock\">\r\n</cms-content-container>"
        },
        {
            "name": "PageEditorComponent",
            "id": "component-PageEditorComponent-7926d19bdafc12941b5c2ca267b4d41d",
            "file": "src/app/components/page-editor/page-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-page-editor",
            "styleUrls": [
                "./page-editor.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editorOptions",
                    "line": 23,
                    "type": "any"
                },
                {
                    "name": "htmlEditorOnly",
                    "line": 25,
                    "type": "boolean"
                },
                {
                    "name": "pageContentDoc",
                    "line": 24,
                    "type": "PageContentDoc"
                },
                {
                    "name": "renderSiteUrl",
                    "line": 22,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "automaticUrl",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "page",
                    "type": "Partial<PageContentDoc>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "pageNavigation",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onAutomaticUrlChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "onPageNavigationChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "onPageStatusChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "onPageTitleKeyUp",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { kebab } from 'case';\r\nimport { PageContentDoc } from 'src/app/models/PageContentDoc.interface';\r\n\r\nconst EMPTY_PAGE_CONTENT_DOC: Partial<PageContentDoc> = {\r\n  Title: '',\r\n  Url: '',\r\n  Description: '',\r\n  HeaderEmbeds: '',\r\n  Content: ``,\r\n  FooterEmbeds: '',\r\n  Active: false,\r\n  NavigationTitle: ''\r\n};\r\n\r\n@Component({\r\n  selector: 'cms-page-editor',\r\n  templateUrl: './page-editor.component.html',\r\n  styleUrls: ['./page-editor.component.scss']\r\n})\r\nexport class PageEditorComponent implements OnInit {\r\n  @Input() renderSiteUrl: string;\r\n  @Input() editorOptions: any;\r\n  @Input() pageContentDoc?: PageContentDoc;\r\n  @Input() htmlEditorOnly?: boolean;\r\n\r\n  page: Partial<PageContentDoc>;\r\n  automaticUrl: boolean;\r\n  pageNavigation: boolean;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.pageContentDoc) {\r\n      this.page = this.pageContentDoc;\r\n      this.automaticUrl =\r\n        this.pageContentDoc.Url === kebab(this.pageContentDoc.Title);\r\n      this.pageNavigation = Boolean(this.pageContentDoc.NavigationTitle);\r\n    } else {\r\n      this.page = EMPTY_PAGE_CONTENT_DOC;\r\n      this.automaticUrl = true;\r\n      this.pageNavigation = false;\r\n    }\r\n  }\r\n\r\n  onPageTitleKeyUp(value: string) {\r\n    if (this.automaticUrl) {\r\n      this.page.Url = kebab(value);\r\n    }\r\n  }\r\n\r\n  onAutomaticUrlChange() {\r\n    if (this.automaticUrl && this.page.Title) {\r\n      this.page.Url = kebab(this.page.Title);\r\n    }\r\n  }\r\n\r\n  onPageNavigationChange() {\r\n    if (this.pageNavigation && !this.page.NavigationTitle) {\r\n      this.page.NavigationTitle = this.page.Title;\r\n    }\r\n  }\r\n\r\n  onPageStatusChange() {\r\n    this.page.Active = !this.page.Active;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-editor.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 29
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"htmlEditorOnly\">\r\n  <cms-html-editor\r\n    [initialValue]=\"page.Content\"\r\n    [editorOptions]=\"editorOptions\"\r\n  ></cms-html-editor>\r\n</div>\r\n<div *ngIf=\"!htmlEditorOnly\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-8\">\r\n      <div class=\"form-group\">\r\n        <label for=\"pageTitle\">Page Title</label>\r\n        <input\r\n          id=\"pageTitle\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"page.Title\"\r\n          #pageTitle\r\n          required\r\n          maxlength=\"100\"\r\n          (keyup)=\"onPageTitleKeyUp(pageTitle.value)\"\r\n          placeholder=\"Choose a descriptive title for this page\"\r\n        />\r\n        <small id=\"pageTitleHelp\" class=\"form-text text-muted\">\r\n          {{ 100 - (page.Title ? page.Title.length : 0) }} / 100 characters\r\n          remaining.\r\n        </small>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-4\">\r\n      <label for=\"pageStatus\">Page Status</label>\r\n      <div id=\"pageStatus\">\r\n        <div class=\"custom-control custom-radio custom-control-inline\">\r\n          <input\r\n            type=\"radio\"\r\n            id=\"pageActive1\"\r\n            name=\"pageActiveStatus\"\r\n            class=\"custom-control-input\"\r\n            [checked]=\"page.Active\"\r\n            (change)=\"onPageStatusChange()\"\r\n          />\r\n          <label class=\"custom-control-label\" for=\"pageActive1\">Active</label>\r\n        </div>\r\n        <div class=\"custom-control custom-radio custom-control-inline\">\r\n          <input\r\n            type=\"radio\"\r\n            id=\"pageActive2\"\r\n            name=\"pageActiveStatus\"\r\n            class=\"custom-control-input\"\r\n            [checked]=\"!page.Active\"\r\n            (change)=\"onPageStatusChange()\"\r\n          />\r\n          <label class=\"custom-control-label\" for=\"pageActive2\">Disabled</label>\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"checkbox\">\r\n        <label for=\"pageActive\">\r\n          <input id=\"pageActive\" type=\"checkbox\" [(ngModel)]=\"page.active\" />\r\n          Active\r\n        </label>\r\n      </div> -->\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <div class=\"custom-control custom-checkbox\">\r\n      <input\r\n        class=\"custom-control-input\"\r\n        id=\"pageNavigation\"\r\n        type=\"checkbox\"\r\n        (change)=\"onPageNavigationChange()\"\r\n        [(ngModel)]=\"pageNavigation\"\r\n      />\r\n      <label class=\"custom-control-label\" for=\"pageNavigation\"\r\n        >Show in navigation</label\r\n      >\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\" [ngbCollapse]=\"!pageNavigation\">\r\n    <label for=\"pageNavigationTitle\">Navigation Title</label>\r\n    <input\r\n      id=\"pageNavigationTitle\"\r\n      type=\"text\"\r\n      class=\"form-control\"\r\n      placeholder=\"Choose a short, one to three word title for navigation elements\"\r\n      [(ngModel)]=\"page.NavigationTitle\"\r\n    />\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <div class=\"custom-control custom-checkbox\">\r\n      <input\r\n        class=\"custom-control-input\"\r\n        id=\"automaticUrl\"\r\n        type=\"checkbox\"\r\n        (change)=\"onAutomaticUrlChange()\"\r\n        [(ngModel)]=\"automaticUrl\"\r\n      />\r\n      <label class=\"custom-control-label\" for=\"automaticUrl\"\r\n        >Generate Page Location based on Page Title</label\r\n      >\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"pageUrl\">Page Location</label>\r\n\r\n    <div class=\"input-group\">\r\n      <div class=\"input-group-prepend\">\r\n        <span class=\"input-group-text\">{{ renderSiteUrl }}/pages/</span>\r\n      </div>\r\n      <input\r\n        id=\"pageUrl\"\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        [(ngModel)]=\"page.Url\"\r\n        [readOnly]=\"automaticUrl\"\r\n        required\r\n        aria-describedby=\"pageUrlHelp\"\r\n        placeholder=\"Choose a location for this page\"\r\n      />\r\n    </div>\r\n    <small id=\"pageUrlHelp\" class=\"form-text text-muted\"\r\n      >Kebab case recommended, use text relevant to this page for best SEO\r\n      results. When \"Generate\" is checked, we will come up with a SEO friendly\r\n      URL for you.\r\n    </small>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"pageTitle\">Description</label>\r\n    <textarea\r\n      id=\"pageDescription\"\r\n      type=\"text\"\r\n      class=\"form-control\"\r\n      [(ngModel)]=\"page.Description\"\r\n      maxlength=\"300\"\r\n      required\r\n      aria-describedby=\"pageDescriptionHelp\"\r\n      placeholder=\"Describe this page in 300 characters or less\"\r\n    ></textarea>\r\n    <small id=\"pageDescriptionHelp\" class=\"form-text text-muted\">\r\n      {{ 300 - (page.Description ? page.Description.length : 0) }} / 300\r\n      characters remaining.\r\n    </small>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"pageHeaderEmbeds\">Header Embeds</label>\r\n    <textarea\r\n      id=\"pageHeaderEmbeds\"\r\n      type=\"text\"\r\n      rows=\"4\"\r\n      class=\"form-control\"\r\n      [(ngModel)]=\"page.HeaderEmbeds\"\r\n      placeholder=\"Copy and paste any scripts you want to execute in the <head> element\"\r\n    ></textarea>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"pageContent\">Page Content</label>\r\n    <cms-html-editor\r\n      [initialValue]=\"page.Content\"\r\n      [editorOptions]=\"editorOptions\"\r\n    ></cms-html-editor>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"pageFooterEmbeds\">Footer Embeds</label>\r\n    <textarea\r\n      id=\"pageFooterEmbeds\"\r\n      type=\"text\"\r\n      rows=\"4\"\r\n      class=\"form-control\"\r\n      [(ngModel)]=\"page.FooterEmbeds\"\r\n      placeholder=\"Copy and paste any scripts you want to execute at the bottom of the <body> element\"\r\n    ></textarea>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SectionDateSettingsComponent",
            "id": "component-SectionDateSettingsComponent-a82fae269effe86fa47466d44977ad73",
            "file": "src/app/components/section-date-settings/section-date-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-section-date-settings",
            "styleUrls": [
                "./section-date-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-date-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "endDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "startDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "zone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, NgZone, Input } from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'cms-section-date-settings',\r\n  templateUrl: './section-date-settings.component.html',\r\n  styleUrls: ['./section-date-settings.component.scss']\r\n})\r\nexport class SectionDateSettingsComponent implements OnInit {\r\n  @Input() data: any;\r\n  startDate: string;\r\n  endDate: string;\r\n  constructor(public modal: NgbActiveModal, public zone: NgZone) {}\r\n\r\n  ngOnInit(): void {\r\n    this.startDate = this.data.startDate;\r\n    this.endDate = this.data.endDate;\r\n  }\r\n\r\n  submit() {\r\n    this.modal.close({ startDate: this.startDate, endDate: this.endDate });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./section-date-settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\r\n  <h4 class=\"modal-title\">Date Settings</h4>\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss('Cross click')\"\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n</div>\r\n<div class=\"modal-body\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n      <div class=\"form-group\">\r\n        <label for=\"startDate\">Show Date</label>\r\n        <input\r\n          id=\"startDate\"\r\n          type=\"date\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"startDate\"\r\n          aria-describedby=\"startDateHelp\"\r\n        />\r\n        <small id=\"startDateHelp\" class=\"form-text text-muted\">\r\n          This section will not appear until this date. If left blank, the\r\n          section will be visible by default.\r\n        </small>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-6\">\r\n      <div class=\"form-group\">\r\n        <label for=\"endDate\">Hide Date</label>\r\n        <input\r\n          id=\"endDate\"\r\n          type=\"date\"\r\n          class=\"form-control\"\r\n          [(ngModel)]=\"endDate\"\r\n          aria-describedby=\"endDateHelp\"\r\n        />\r\n        <small id=\"endDateHelp\" class=\"form-text text-muted\">\r\n          This section will hide starting on this date. If left blank, the\r\n          section will remain visible by default.\r\n        </small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"submit()\">\r\n    Save Changes\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "SectionPickerComponent",
            "id": "component-SectionPickerComponent-0ff199b311535d4b63290470fa338d85",
            "file": "src/app/components/section-picker/section-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-section-picker",
            "styleUrls": [
                "./section-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 20,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "debounceTimeout",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "listElement",
                    "type": "ElementRef<HTMLDivElement>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'list', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "modal",
                    "type": "NgbActiveModal",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "previewTransformRatio",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "previewWidth",
                    "defaultValue": "1024",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sectionTemplates",
                    "defaultValue": "sectionPickerMock",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectedTemplateIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "zone",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "determineTransformRatio",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "handleSelectTemplate",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  NgZone,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  AfterViewChecked\r\n} from '@angular/core';\r\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport sectionPickerMock from './section-picker.mock';\r\n\r\n@Component({\r\n  selector: 'cms-section-picker',\r\n  templateUrl: './section-picker.component.html',\r\n  styleUrls: ['./section-picker.component.scss']\r\n})\r\nexport class SectionPickerComponent implements AfterViewChecked {\r\n  @ViewChild('list', { read: ElementRef })\r\n  listElement: ElementRef<HTMLDivElement>;\r\n  @Input() data: any;\r\n  sectionTemplates = sectionPickerMock;\r\n  selectedTemplateIndex: number;\r\n  previewWidth: number = 1024;\r\n  previewTransformRatio: number = 1;\r\n  debounceTimeout: any;\r\n  constructor(public modal: NgbActiveModal, public zone: NgZone) {}\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this.debounceTimeout) {\r\n      clearTimeout(this.debounceTimeout);\r\n    }\r\n\r\n    //TODO: this seems like it's getting hit way more than it should.\r\n    console.log('hit');\r\n\r\n    this.debounceTimeout = setTimeout(() => {\r\n      const transformRatio = this.determineTransformRatio();\r\n      if (this.previewTransformRatio !== transformRatio) {\r\n        this.previewTransformRatio = transformRatio;\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  determineTransformRatio() {\r\n    if (this.listElement && this.listElement.nativeElement) {\r\n      return this.listElement.nativeElement.clientWidth / this.previewWidth;\r\n    }\r\n    return 1;\r\n  }\r\n\r\n  handleSelectTemplate(index) {\r\n    this.selectedTemplateIndex = index;\r\n  }\r\n\r\n  submit() {\r\n    this.modal.close(this.sectionTemplates[this.selectedTemplateIndex]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section-picker_container {\r\n  background: #f2f2f2;\r\n}\r\n\r\n.section-picker_list {\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.section-picker_body {\r\n  height: calc(100vh - (3.5rem + 150px));\r\n  overflow-y: auto;\r\n}\r\n",
                    "styleUrl": "./section-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal"
                    },
                    {
                        "name": "zone",
                        "type": "NgZone"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "modal",
                        "type": "NgbActiveModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"modal-header\">\r\n  <h4 class=\"modal-title\">Section Template Library</h4>\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"modal.dismiss('Cross click')\"\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n</div>\r\n<div class=\"modal-body py-0 section-picker_body\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-3\"></div>\r\n    <div class=\"col-sm-9 section-picker_container py-3\">\r\n      <div #list class=\"section-picker_list\">\r\n        <div *ngFor=\"let template of sectionTemplates; index as i\">\r\n          <cms-section-template-renderer\r\n            [html]=\"template\"\r\n            [selected]=\"i === selectedTemplateIndex\"\r\n            (click)=\"handleSelectTemplate(i)\"\r\n            [previewWidth]=\"previewWidth\"\r\n            [previewTransformRatio]=\"previewTransformRatio\"\r\n            [remoteCss]=\"data.remoteCss\"\r\n          ></cms-section-template-renderer>\r\n\r\n          <hr *ngIf=\"i < sectionTemplates.length - 1\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"submit()\">\r\n    Add Section\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "SectionTemplateRendererComponent",
            "id": "component-SectionTemplateRendererComponent-0d46727f372abb13e01a18a75a06c4c2",
            "file": "src/app/components/section-template-renderer/section-template-renderer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cms-section-template-renderer",
            "styleUrls": [
                "./section-template-renderer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./section-template-renderer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "html",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "previewTransformRatio",
                    "line": 25,
                    "type": "number"
                },
                {
                    "name": "previewWidth",
                    "line": 24,
                    "type": "number"
                },
                {
                    "name": "remoteCss",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "iframeElement",
                    "type": "ElementRef<HTMLIFrameElement>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'iframe', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "iframeSource",
                    "type": "SafeUrl",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rootHeight",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "transform",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPreviewTransformRatio",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkRemoteCss",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initIframeSource",
                    "args": [],
                    "optional": false,
                    "returnType": "SafeUrl",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onIframeLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnInit,\r\n  SimpleChanges,\r\n  OnChanges\r\n} from '@angular/core';\r\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'cms-section-template-renderer',\r\n  templateUrl: './section-template-renderer.component.html',\r\n  styleUrls: ['./section-template-renderer.component.scss']\r\n})\r\nexport class SectionTemplateRendererComponent implements OnInit, OnChanges {\r\n  @Input() html: string;\r\n  @Input() selected: boolean;\r\n  @Input() remoteCss: string;\r\n  @ViewChild('iframe', { read: ElementRef }) iframeElement: ElementRef<\r\n    HTMLIFrameElement\r\n  >;\r\n  @Input() previewWidth: number;\r\n  @Input() previewTransformRatio: number;\r\n  iframeSource: SafeUrl;\r\n  height: number;\r\n  rootHeight: number;\r\n  transform: string;\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  ngOnInit() {\r\n    if (this.remoteCss) {\r\n      this.iframeSource = this.initIframeSource();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.checkPreviewTransformRatio(changes);\r\n    this.checkRemoteCss(changes);\r\n  }\r\n\r\n  checkPreviewTransformRatio(changes: SimpleChanges) {\r\n    if (\r\n      (changes.previewTransformRatio &&\r\n        changes.previewTransformRatio.currentValue !==\r\n          changes.previewTransformRatio.previousValue) ||\r\n      (changes.height &&\r\n        changes.height.currentValue !== changes.height.previousValue)\r\n    ) {\r\n      this.transform = `scale(${this.previewTransformRatio})`;\r\n      this.rootHeight = this.previewTransformRatio * (this.height + 4);\r\n    }\r\n  }\r\n\r\n  checkRemoteCss(changes: SimpleChanges) {\r\n    if (\r\n      changes.remoteCss &&\r\n      !changes.remoteCss.firstChange &&\r\n      changes.remoteCss.currentValue !== changes.remoteCss.previousValue\r\n    ) {\r\n      this.iframeSource = this.initIframeSource();\r\n    }\r\n  }\r\n\r\n  initIframeSource(): SafeUrl {\r\n    const documentSource = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n      <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n      <head>\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\r\n      <style>@import url('${this.remoteCss}');</style>\r\n      </head>\r\n      <body style=\"padding-top:0 !important;\">${this.html}</body>\r\n      </html>`;\r\n    const blob = new Blob([documentSource], { type: 'application/xhtml+xml' });\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(\r\n      URL.createObjectURL(blob)\r\n    );\r\n  }\r\n\r\n  onIframeLoaded() {\r\n    if (this.iframeElement) {\r\n      const iframeDoc = this.iframeElement.nativeElement.contentWindow.document;\r\n      this.height = iframeDoc.body.clientHeight;\r\n      this.rootHeight = (this.height + 4) * this.previewTransformRatio;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section-template-renderer_iframe {\r\n  border: none;\r\n  transform-origin: left top;\r\n  pointer-events: none;\r\n}\r\n\r\n.section-template-renderer_root {\r\n  border: 2px solid rgb(196, 196, 196);\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  margin-bottom: 15px;\r\n  cursor: pointer;\r\n\r\n  &.loading {\r\n    position: relative;\r\n  }\r\n\r\n  &.loading:after {\r\n    content: ' ';\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    background-color: rgb(196, 196, 196);\r\n  }\r\n\r\n  &.selected {\r\n    border-color: blue;\r\n  }\r\n}\r\n",
                    "styleUrl": "./section-template-renderer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div\r\n  #root\r\n  class=\"section-template-renderer_root\"\r\n  [ngClass]=\"{ selected: selected, loading: !rootHeight }\"\r\n  [ngStyle]=\"{ 'height.px': rootHeight }\"\r\n>\r\n  <iframe\r\n    *ngIf=\"iframeSource\"\r\n    #iframe\r\n    class=\"section-template-renderer_iframe\"\r\n    [ngStyle]=\"{\r\n      'height.px': height,\r\n      'width.px': previewWidth,\r\n      transform: transform\r\n    }\"\r\n    [src]=\"iframeSource\"\r\n    scrolling=\"no\"\r\n    (load)=\"onIframeLoaded()\"\r\n  ></iframe>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "AssetPickerComponent"
                        },
                        {
                            "name": "CarouselEditorComponent"
                        },
                        {
                            "name": "ConfirmModalComponent"
                        },
                        {
                            "name": "HtmlEditorComponent"
                        },
                        {
                            "name": "PageEditorComponent"
                        },
                        {
                            "name": "SafeHtmlPipe"
                        },
                        {
                            "name": "SectionDateSettingsComponent"
                        },
                        {
                            "name": "SectionPickerComponent"
                        },
                        {
                            "name": "SectionTemplateRendererComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BasicExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/storybook/html-editor.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  component: HtmlEditorComponent,\r\n  props: {\r\n    ocToken: '',\r\n    editorOptions: {\r\n      ordercloud: {\r\n        marketplaceUrl: 'https://marketplace-middleware-test.azurewebsites.net',\r\n        access_token:\r\n          'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c3IiOiJhbm9uLXRlbXBsYXRlLXVzZXIiLCJjaWQiOiJlOTU1ZDZlYy01OWM4LTQ0NDItOTQ4ZS0xNmNjYzVmZDI3YWUiLCJvcmRlcmlkIjoiWTR5SzNwdUl1MGE3Qk5CV2pjWEVMQSIsInUiOiIxMDIwMjMwIiwidXNydHlwZSI6ImJ1eWVyIiwicm9sZSI6WyJNZUFkZHJlc3NBZG1pbiIsIk1lQWRtaW4iLCJNZUNyZWRpdENhcmRBZG1pbiIsIk1lWHBBZG1pbiIsIlNob3BwZXIiLCJTdXBwbGllclJlYWRlciIsIlN1cHBsaWVyQWRkcmVzc1JlYWRlciIsIlBhc3N3b3JkUmVzZXQiLCJCdXllclJlYWRlciJdLCJpc3MiOiJodHRwczovL2F1dGgub3JkZXJjbG91ZC5pbyIsImF1ZCI6Imh0dHBzOi8vYXBpLm9yZGVyY2xvdWQuaW8iLCJleHAiOjE1OTQ4NDUxNTksIm5iZiI6MTU5NDI0MDM1OX0.lpQBQAYqlssXmxtcHLxck5N6CGxr31ZA71SUqyxxLJE'\r\n      },\r\n      content_css: [\r\n        // 'https://piasstorageprod.azureedge.net/buyerweb/styles.07d24b25eb6a60350a70.css',\r\n        'https://mgrstoragetest.azureedge.net/buyerweb/styles.e94215343d3493186ae1.css',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css'\r\n      ]\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "colMarkup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/components/InsertRow/InsertRow.ts",
                "type": "",
                "defaultValue": "`\r\n  <div class=\"col\" style=\"border:1px dashed #ddd\" contenteditable=\"true\" ${OC_TINYMCE_WIDGET_ATTRIBUTE}=\"${OC_TINYMCE_COL_WIDGET_ID}\"></div>\r\n`"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "EMPTY_PAGE_CONTENT_DOC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/page-editor/page-editor.component.ts",
                "type": "Partial<PageContentDoc>",
                "defaultValue": "{\r\n  Title: '',\r\n  Url: '',\r\n  Description: '',\r\n  HeaderEmbeds: '',\r\n  Content: ``,\r\n  FooterEmbeds: '',\r\n  Active: false,\r\n  NavigationTitle: ''\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "fetch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/components/InsertProduct/InsertProduct.ts",
                "type": "any"
            },
            {
                "name": "isWidgetType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/services/widget.service.ts",
                "type": "",
                "defaultValue": "(editor: any, node: any, type: string) => {\r\n  let widgetName =\r\n    typeof node.attr === 'function'\r\n      ? node.attr(OC_TINYMCE_WIDGET_ATTRIBUTE)\r\n      : editor.dom.getAttrib(node, OC_TINYMCE_WIDGET_ATTRIBUTE);\r\n  const re = new RegExp(`\\\\b${type}\\\\b`);\r\n  return widgetName && re.test(widgetName);\r\n}"
            },
            {
                "name": "OC_TINYMCE_COL_WIDGET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'oc-col'"
            },
            {
                "name": "OC_TINYMCE_PRODUCT_WIDGET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'oc-product'"
            },
            {
                "name": "OC_TINYMCE_ROW_WIDGET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'oc-row'"
            },
            {
                "name": "OC_TINYMCE_SECTION_WIDGET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'oc-section'"
            },
            {
                "name": "OC_TINYMCE_WIDGET_ATTRIBUTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/constants/widget.constants.ts",
                "type": "string",
                "defaultValue": "'data-oc-widget'"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "rowMarkup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/components/InsertRow/InsertRow.ts",
                "type": "",
                "defaultValue": "`\r\n  <div class=\"row\" ${OC_TINYMCE_WIDGET_ATTRIBUTE}=\"${OC_TINYMCE_ROW_WIDGET_ID}\">${colMarkup}</div>\r\n`"
            },
            {
                "name": "tinymce",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/index.ts",
                "type": "any"
            },
            {
                "name": "tinymce",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "plugin/src/components/InsertRow/InsertRow.ts",
                "type": "any"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "BootstrapBreakpoint",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                "file": "src/app/models/ColumnContentDoc.interface.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "BootstrapCarouselPauseOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"hover\" | \"mouseenter\" | \"mouseleave\" | \"undefined\"",
                "file": "src/app/models/CarouselContentDoc.interface.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "BootstrapCarouselRideOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"carousel\" | \"undefined\"",
                "file": "src/app/models/CarouselContentDoc.interface.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "BootstrapMediaDefinition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/models/ColumnContentDoc.interface.ts",
                "description": "",
                "kind": 176
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/storybook/html-editor.stories.ts": [
                {
                    "name": "BasicExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/storybook/html-editor.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: HtmlEditorComponent,\r\n  props: {\r\n    ocToken: '',\r\n    editorOptions: {\r\n      ordercloud: {\r\n        marketplaceUrl: 'https://marketplace-middleware-test.azurewebsites.net',\r\n        access_token:\r\n          'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c3IiOiJhbm9uLXRlbXBsYXRlLXVzZXIiLCJjaWQiOiJlOTU1ZDZlYy01OWM4LTQ0NDItOTQ4ZS0xNmNjYzVmZDI3YWUiLCJvcmRlcmlkIjoiWTR5SzNwdUl1MGE3Qk5CV2pjWEVMQSIsInUiOiIxMDIwMjMwIiwidXNydHlwZSI6ImJ1eWVyIiwicm9sZSI6WyJNZUFkZHJlc3NBZG1pbiIsIk1lQWRtaW4iLCJNZUNyZWRpdENhcmRBZG1pbiIsIk1lWHBBZG1pbiIsIlNob3BwZXIiLCJTdXBwbGllclJlYWRlciIsIlN1cHBsaWVyQWRkcmVzc1JlYWRlciIsIlBhc3N3b3JkUmVzZXQiLCJCdXllclJlYWRlciJdLCJpc3MiOiJodHRwczovL2F1dGgub3JkZXJjbG91ZC5pbyIsImF1ZCI6Imh0dHBzOi8vYXBpLm9yZGVyY2xvdWQuaW8iLCJleHAiOjE1OTQ4NDUxNTksIm5iZiI6MTU5NDI0MDM1OX0.lpQBQAYqlssXmxtcHLxck5N6CGxr31ZA71SUqyxxLJE'\r\n      },\r\n      content_css: [\r\n        // 'https://piasstorageprod.azureedge.net/buyerweb/styles.07d24b25eb6a60350a70.css',\r\n        'https://mgrstoragetest.azureedge.net/buyerweb/styles.e94215343d3493186ae1.css',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css',\r\n        'https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css'\r\n      ]\r\n    }\r\n  }\r\n})"
                }
            ],
            "plugin/src/components/InsertRow/InsertRow.ts": [
                {
                    "name": "colMarkup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/components/InsertRow/InsertRow.ts",
                    "type": "",
                    "defaultValue": "`\r\n  <div class=\"col\" style=\"border:1px dashed #ddd\" contenteditable=\"true\" ${OC_TINYMCE_WIDGET_ATTRIBUTE}=\"${OC_TINYMCE_COL_WIDGET_ID}\"></div>\r\n`"
                },
                {
                    "name": "rowMarkup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/components/InsertRow/InsertRow.ts",
                    "type": "",
                    "defaultValue": "`\r\n  <div class=\"row\" ${OC_TINYMCE_WIDGET_ATTRIBUTE}=\"${OC_TINYMCE_ROW_WIDGET_ID}\">${colMarkup}</div>\r\n`"
                },
                {
                    "name": "tinymce",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/components/InsertRow/InsertRow.ts",
                    "type": "any"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/components/page-editor/page-editor.component.ts": [
                {
                    "name": "EMPTY_PAGE_CONTENT_DOC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/page-editor/page-editor.component.ts",
                    "type": "Partial<PageContentDoc>",
                    "defaultValue": "{\r\n  Title: '',\r\n  Url: '',\r\n  Description: '',\r\n  HeaderEmbeds: '',\r\n  Content: ``,\r\n  FooterEmbeds: '',\r\n  Active: false,\r\n  NavigationTitle: ''\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "plugin/src/components/InsertProduct/InsertProduct.ts": [
                {
                    "name": "fetch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/components/InsertProduct/InsertProduct.ts",
                    "type": "any"
                }
            ],
            "plugin/src/services/widget.service.ts": [
                {
                    "name": "isWidgetType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/services/widget.service.ts",
                    "type": "",
                    "defaultValue": "(editor: any, node: any, type: string) => {\r\n  let widgetName =\r\n    typeof node.attr === 'function'\r\n      ? node.attr(OC_TINYMCE_WIDGET_ATTRIBUTE)\r\n      : editor.dom.getAttrib(node, OC_TINYMCE_WIDGET_ATTRIBUTE);\r\n  const re = new RegExp(`\\\\b${type}\\\\b`);\r\n  return widgetName && re.test(widgetName);\r\n}"
                }
            ],
            "plugin/src/constants/widget.constants.ts": [
                {
                    "name": "OC_TINYMCE_COL_WIDGET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'oc-col'"
                },
                {
                    "name": "OC_TINYMCE_PRODUCT_WIDGET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'oc-product'"
                },
                {
                    "name": "OC_TINYMCE_ROW_WIDGET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'oc-row'"
                },
                {
                    "name": "OC_TINYMCE_SECTION_WIDGET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'oc-section'"
                },
                {
                    "name": "OC_TINYMCE_WIDGET_ATTRIBUTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/constants/widget.constants.ts",
                    "type": "string",
                    "defaultValue": "'data-oc-widget'"
                }
            ],
            "plugin/src/index.ts": [
                {
                    "name": "tinymce",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "plugin/src/index.ts",
                    "type": "any"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/models/ColumnContentDoc.interface.ts": [
                {
                    "name": "BootstrapBreakpoint",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "file": "src/app/models/ColumnContentDoc.interface.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "BootstrapMediaDefinition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/models/ColumnContentDoc.interface.ts",
                    "description": "",
                    "kind": 176
                }
            ],
            "src/app/models/CarouselContentDoc.interface.ts": [
                {
                    "name": "BootstrapCarouselPauseOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"hover\" | \"mouseenter\" | \"mouseleave\" | \"undefined\"",
                    "file": "src/app/models/CarouselContentDoc.interface.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "BootstrapCarouselRideOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"carousel\" | \"undefined\"",
                    "file": "src/app/models/CarouselContentDoc.interface.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "plugin/src/components/InsertProduct/InsertProduct.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fetch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/components/InsertRow/InsertRow.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colMarkup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/components/InsertRow/InsertRow.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rowMarkup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/components/InsertRow/InsertRow.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tinymce",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_COL_WIDGET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_PRODUCT_WIDGET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_ROW_WIDGET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_SECTION_WIDGET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/constants/widget.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OC_TINYMCE_WIDGET_ATTRIBUTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tinymce",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "plugin/src/services/widget.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isWidgetType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/asset-picker/asset-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AssetPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/carousel-editor/carousel-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/confirm-modal/confirm-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/html-editor/html-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HtmlEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-editor/page-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-editor/page-editor.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMPTY_PAGE_CONTENT_DOC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/section-date-settings/section-date-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionDateSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/section-picker/section-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/section-template-renderer/section-template-renderer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SectionTemplateRendererComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/bg-color.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BgColorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/CarouselContentDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BootstrapCarouselOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/CarouselContentDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CarouselContentDoc",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/CarouselSlide.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CarouselSlide",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/CmsAssets.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CmsAsset",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/CmsCarousel.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CmsBackground",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/CmsCarousel.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CmsCarouselOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/CmsCarousel.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CmsCarouselSlideConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/CmsCarousel.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CmsCarouselSlideTextConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/ColumnContentDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColumnContentDoc",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/ContentBlockDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Background",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/ContentBlockDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentBlockDoc",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/ContentBlockDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentButton",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/ContentBlockDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateRange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/ContentDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ContentDoc",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/PageContentDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PageContentDoc",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/models/RowContentDoc.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RowContentDoc",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/safe-html.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/storybook/html-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}